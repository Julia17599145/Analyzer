package app;

import java.awt.Color;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import javax.swing.table.*;
import javax.swing.RowSorter;
import javax.swing.event.TableModelListener;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.TextAnchor;
import org.tartarus.snowball.SnowballStemmer;
import org.tartarus.snowball.ext.russianStemmer;

//import java.io.OptionHandler;
//import java.io. RevisionHandler;
//import java.io.Stemmer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Юлия
 */
public class NewJFrame extends javax.swing.JFrame {

    private XYDataset createDatasetLetter(double[][] frequency) { //double[][] frequency

        final XYSeriesCollection dataset = new XYSeriesCollection();
        final XYSeries c2
                = new XYSeries("с2");
        final XYSeries c3
                = new XYSeries("с3");
        final XYSeries c4
                = new XYSeries("с4");
        for (int i = 0; i < 201; i++) {
            c2.add(frequency[3][i], frequency[0][i]);
            c3.add(frequency[3][i], frequency[1][i]);
            c4.add(frequency[3][i], frequency[2][i]);
        }
        dataset.addSeries(c2);
        dataset.addSeries(c3);
        dataset.addSeries(c4);
        return dataset;
    }

    private XYDataset createDatasetNgramm(double[][] frequency) {

        final XYSeriesCollection dataset = new XYSeriesCollection();
        final XYSeries c2
                = new XYSeries("с2");
        final XYSeries c3
                = new XYSeries("с3");
        final XYSeries c4
                = new XYSeries("с4");
        final XYSeries c5
                = new XYSeries("с5");
        for (int i = 0; i < 201; i++) {
            c2.add(frequency[4][i], frequency[0][i]);
            c3.add(frequency[4][i], frequency[1][i]);
            c4.add(frequency[4][i], frequency[2][i]);
            c5.add(frequency[4][i], frequency[3][i]);
        }
        dataset.addSeries(c2);
        dataset.addSeries(c3);
        dataset.addSeries(c4);
        dataset.addSeries(c5);
        return dataset;
    }

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jRadioButton3 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Считать данные из файла");

        jButton1.setText("Открыть");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Расчет частоты:");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("по словам");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("юниграмма");

        jButton2.setText("Вычислить");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title3"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("Очистить");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("биграмма");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(121, 356, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jRadioButton3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(139, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    File file = new File("");
    StringBuilder sb = new StringBuilder();
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int returnVal = jFileChooser1.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = jFileChooser1.getSelectedFile();

            try {
                //Объект для чтения файла в буфер
                FileInputStream stream = new FileInputStream(file.getAbsoluteFile());
                InputStreamReader reader = new InputStreamReader(stream, "Cp1251");
                BufferedReader in = new BufferedReader(reader);
                try {
                    //В цикле построчно считываем файл
                    String s;
                    while ((s = in.readLine()) != null) {
                        sb.append(s);
                        //sb.append("\n");
                    }
                } finally {
                    //Также не забываем закрыть файл
                    in.close();
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (!file.exists()) {
            JOptionPane.showMessageDialog(jButton1, "Вы не выбрали файл!");
            return;
        } else {
            if (jRadioButton1.isSelected()) {

                //String regexp = "\\s+\\-\\s+[,;:.!?\\s]+";
                String regexp = "^[^а-я\\,;\\-:()–«»\".!?\\s\\d]|[\\,;\\-:()–«»\".!?\\s\\d]+";
                String[] words = sb.toString().toLowerCase().trim().split(regexp);
                ArrayList<String> wordList = new ArrayList(Arrays.asList(words));

                TextStatistics stats = new TextStatistics(wordList);
                List<WordStatistic> was = stats.getWordsAndAmounts();
                //was.forEach(ws -> System.out.println(ws.toString()));

                TableModel model = new WordStatisticTableModel(was);
                jTable1.setModel(model);
                RowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
                jTable1.setRowSorter(sorter);
                final String series1 = "First";
                final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                was.sort(null);

            } else if (jRadioButton2.isSelected()) {
                ArrayList<Character> chars = new ArrayList<Character>();
                for (char c : sb.toString().toLowerCase().toCharArray()) {
                    chars.add(c);
                }
                LetterCount stats = new LetterCount(chars);
                List<LetterStatistic> was = stats.getLettersAndAmounts();
                was.sort(null);
                for (int i = 0; i < was.size(); i++) {
                    System.out.println(was.get(i).getLetter());
                }
                for (int i = 0; i < was.size(); i++) {
                    System.out.println(was.get(i).getFrequency());
                }
                char[] letters = sb.toString().toLowerCase().toCharArray();
                int step = letters.length / 200;
                int minN = 0;
                int[] amount = {0, 0, 0};
                double[][] frequency = new double[4][201];
                for (int i = 0; i < 3; i++) {
                    frequency[i][0] = 0;
                }
                for (int i = 1; i < 201; i++) {
                    frequency[3][i] = step;
                    for (int j = minN; j < step; j++) {
                        if (letters[j] == 'а') {
                            amount[0]++;
                        } else if (letters[j] == 'б') {
                            amount[1]++;
                        } else if (letters[j] == ' ') {
                            amount[2]++;
                        }
                    }
                    //System.out.println(amount[0] + " " + step);
                    frequency[0][i] = amount[0] / (double) step;
                    frequency[1][i] = amount[1] / (double) step;
                    frequency[2][i] = amount[2] / (double) step;
                    minN = step;
                    step += letters.length / 200;
                }

                //was.forEach(ws -> System.out.println(ws.toString()));
                ChartPanel chartPanel1;
                JFreeChart chart
                        = ChartFactory.createXYLineChart("", "Количество символов в тексте", "Частота появления символа",
                                createDatasetLetter(frequency), PlotOrientation.VERTICAL, false, true, false);
                chart.setBackgroundPaint(Color.white);

//Создаем аннотацию указывая ее текст и координаты в единицах координатной системы самого графика
                XYTextAnnotation c2 = new XYTextAnnotation("СИМВОЛ 'А'", 25000, 0.065);

//Присваивем аннотации якорь; т.е. указываем в какую сторону от указанных координат будет простираться текст
                c2.setTextAnchor(TextAnchor.HALF_ASCENT_RIGHT);

//Наносим аннотацию на график
                chart.getXYPlot().addAnnotation(c2);
                XYTextAnnotation c3 = new XYTextAnnotation("СИМВОЛ 'Б'", 25000, 0.018);
                c3.setTextAnchor(TextAnchor.HALF_ASCENT_RIGHT);
                chart.getXYPlot().addAnnotation(c3);
                XYTextAnnotation c4 = new XYTextAnnotation("СИМВОЛ 'ПРОБЕЛ'", 25000, 0.115);
                c4.setTextAnchor(TextAnchor.HALF_ASCENT_RIGHT);

                chart.getXYPlot().addAnnotation(c4);
                //final StandardLegend legend = (StandardLegend) chart.getLegend();
                // legend.setDisplaySeriesShapes(true);
                // get a reference to the plot for further customisation...
                final XYPlot plot = chart.getXYPlot();
                /*final ValueAxis xAxis = plot.getRangeAxis();
                 xAxis.setUpperBound(1);*/
                plot.setBackgroundPaint(Color.white);

                //    plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
                plot.setDomainGridlinePaint(Color.black);
                plot.setRangeGridlinePaint(Color.black);
                final XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
                for (int i = 0; i < 3; i++) {
                    renderer.setSeriesShapesVisible(i, false);
                    renderer.setSeriesPaint(i, Color.black);
                }

                plot.setRenderer(renderer);
                final ChartPanel chartPanel = new ChartPanel(chart);
                chartPanel.setPreferredSize(new java.awt.Dimension(400, 400));
                setContentPane(chartPanel);

                //сортировка таблицы
                /*TableModel model = new LetterStatisticTableModel(was);
                 jTable1.setModel(model);
                 RowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
                 jTable1.setRowSorter(sorter);*/
            } else if (jRadioButton3.isSelected()) {
                //биграмма
                char[] charts = sb.toString().toLowerCase().toCharArray();
                String[] bigramms = new String[charts.length - 1];
                for (int i = 0; i < charts.length - 1; i++) {
                    bigramms[i] = Character.toString(charts[i]).concat(Character.toString(charts[i + 1]));
                }
                ArrayList<String> bigrammsList = new ArrayList(Arrays.asList(bigramms));
                TextStatistics stats = new TextStatistics(bigrammsList);
                List<WordStatistic> was = stats.getWordsAndAmounts();

                TableModel model = new WordStatisticTableModel(was);
                jTable1.setModel(model);
                RowSorter<TableModel> sorter = new TableRowSorter<TableModel>(model);
                jTable1.setRowSorter(sorter);
                was.sort(null);
                //триграмма
                String[] trigramms = new String[charts.length - 2];
                for (int i = 0; i < charts.length - 2; i++) {
                    trigramms[i] = Character.toString(charts[i]).concat(Character.toString(charts[i + 1])).concat(Character.toString(charts[i + 2]));
                }
                ArrayList<String> trigrammsList = new ArrayList(Arrays.asList(trigramms));
                TextStatistics stats2 = new TextStatistics(trigrammsList);
                List<WordStatistic> was2 = stats2.getWordsAndAmounts();

                int step = bigramms.length / 200;
                int minN = 0;
                int[] amount = {0, 0, 0, 0};
                double[][] frequency = new double[5][201];
                for (int i = 0; i < 4; i++) {
                    frequency[i][0] = 0;
                }
                for (int i = 1; i < 201; i++) {
                    frequency[4][i] = step;
                    for (int j = minN; j < step; j++) {
                        if (bigramms[j].equals("ст")) {
                            amount[0]++;
                        } else if (bigramms[j].equals("но")) {
                            amount[1]++;
                        } else if (trigramms[j].equals("бан")) {
                            amount[2]++;
                        } else if (trigramms[j].equals("аци")) {
                            amount[3]++;
                        }
                    }
                    frequency[0][i] = amount[0] / (double) step;
                    frequency[1][i] = amount[1] / (double) step;
                    frequency[2][i] = amount[2] / (double) step;
                    frequency[3][i] = amount[3] / (double) step;
                    minN = step;
                    step += bigramms.length / 200;
                }

                //гистограмма
                /*final String series1 = "First";
                 final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                 was.sort(null);
                 for (int i = 0; i < 100; i++) {
                 dataset.addValue(was.get(i).getFrequency(), series1, Integer.toString(i));
                 }
                 final JFreeChart chart = ChartFactory.createBarChart(
                 "", // chart title
                 "Биграмма", // domain axis label
                 "Частота появления биграммы", // range axis label
                 dataset, // data
                 PlotOrientation.VERTICAL, // orientation
                 false, // include legend
                 true, // tooltips?
                 false // URLs?
                 );
                 final CategoryPlot plot = chart.getCategoryPlot();
                 final BarRenderer renderer = (BarRenderer) plot.getRenderer();
                 renderer.setDrawBarOutline(false);
                 renderer.setItemMargin(0.10);
           
                 renderer.setShadowVisible(false);
                 //renderer.setMaximumBarWidth(0.10);
                 final GradientPaint gp0 = new GradientPaint(
                 0.0f, 0.0f, Color.black,
                 0.0f, 0.0f, Color.black
                 );
                 renderer.setSeriesPaint(0, gp0);
                 plot.setBackgroundPaint(Color.white);
                 renderer.setItemLabelsVisible(false);
                 /*final ItemLabelPosition p = new ItemLabelPosition(
                 ItemLabelAnchor.INSIDE12, TextAnchor.CENTER_RIGHT,
                 TextAnchor.CENTER_RIGHT, -Math.PI / 2.0
                 );*/
                //renderer.setPositiveItemLabelPosition(p);
                /*final ItemLabelPosition p2 = new ItemLabelPosition(
                 ItemLabelAnchor.OUTSIDE12, TextAnchor.CENTER_LEFT,
                 TextAnchor.CENTER_LEFT, -Math.PI / 2.0
                 );
                 renderer.setPositiveItemLabelPositionFallback(p2);
                 final CategoryAxis domainAxis = plot.getDomainAxis();
                 domainAxis.setCategoryLabelPositions(CategoryLabelPositions.UP_45);
                 //plot.setDomainGridlinePaint(Color.black);
                 plot.setRangeGridlinePaint(Color.black);
                 plot.setRenderer(renderer);
                 final ChartPanel chartPanel = new ChartPanel(chart);
                 chartPanel.setPreferredSize(new java.awt.Dimension(400, 400));
                 setContentPane(chartPanel);*/
                //график
                /*ChartPanel chartPanel1;
                 JFreeChart chart
                 = ChartFactory.createXYLineChart("", "Количество символов в тексте", "Частота появления символа",
                 createDatasetNgramm(frequency), PlotOrientation.VERTICAL, false, true, false);
                 chart.setBackgroundPaint(Color.white);
                 //Создаем аннотацию указывая ее текст и координаты в единицах координатной системы самого графика
                 XYTextAnnotation c2 = new XYTextAnnotation("БИГРАММА 'СТ'", 25000, 0.019);

                 //Присваивем аннотации якорь; т.е. указываем в какую сторону от указанных координат будет простираться текст
                 c2.setTextAnchor(TextAnchor.HALF_ASCENT_RIGHT);

                 //Наносим аннотацию на график
                 chart.getXYPlot().addAnnotation(c2);
                 XYTextAnnotation c3 = new XYTextAnnotation("БИГРАММА 'НО'", 25000, 0.013);
                 c3.setTextAnchor(TextAnchor.HALF_ASCENT_RIGHT);
                 chart.getXYPlot().addAnnotation(c3);
                 XYTextAnnotation c4 = new XYTextAnnotation("ТРИГРАММА 'БАН'", 25000, 0.0026);
                 c4.setTextAnchor(TextAnchor.HALF_ASCENT_RIGHT);
                 chart.getXYPlot().addAnnotation(c4);
                 XYTextAnnotation c5 = new XYTextAnnotation("ТРИГРАММА 'АЦИ'", 30000, 0.0085);
                 c5.setTextAnchor(TextAnchor.HALF_ASCENT_RIGHT);
                 chart.getXYPlot().addAnnotation(c5);
                 final XYPlot plot = chart.getXYPlot();
                 plot.setBackgroundPaint(Color.white);
                 plot.setDomainGridlinePaint(Color.black);
                 plot.setRangeGridlinePaint(Color.black);
                 final XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
                 for (int i = 0; i < 4; i++) {
                 renderer.setSeriesShapesVisible(i, false);
                 renderer.setSeriesPaint(i, Color.black);
                 }
                 plot.setRenderer(renderer);
                 final ChartPanel chartPanel = new ChartPanel(chart);
                 chartPanel.setPreferredSize(new java.awt.Dimension(400, 400));
                 setContentPane(chartPanel);*/
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jTable1.setModel(new DefaultTableModel());
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
